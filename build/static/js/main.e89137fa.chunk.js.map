{"version":3,"sources":["BaiTapThuKinh/BaiTapThuKinh.js","App.js","serviceWorker.js","index.js"],"names":["BaiTapThuKinh","state","glassesCurrent","renderGlassesList","dataGlasses","map","glassesItem","index","onClick","changeGlasses","className","style","width","cursor","key","src","url","newGlasses","setState","keyFrame","Date","now","backgroundImage","backgroundSize","height","backgroundColor","alt","top","right","opacity","this","left","paddingLeft","textAlign","color","fontSize","name","paddingRight","fontWeight","desc","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"u2DAIqBA,G,kNAGjBC,MAAQ,CACJC,eAAgB,CACZ,GAAM,EACN,MAAS,GACT,KAAQ,eACR,IAAO,wBACP,KAAQ,gG,EAKhBC,kBAAoB,WAChB,OAAOC,EAAYC,KAAI,SAACC,EAAaC,GACjC,OAAO,yBAAKC,QAAS,WAAM,EAAKC,cAAcH,IAAgBI,UAAU,iCAAiCC,MAAO,CAAEC,MAAO,QAASC,OAAQ,WAAaC,IAAKP,EAAOQ,IAAKT,EAAYU,U,EAI5LP,cAAgB,SAACQ,GACb,EAAKC,SAAS,CACVhB,eAAee,K,uDAMnB,IAAME,EAAQ,sCAAkCC,KAAKC,MAAvC,+RAkCd,OACI,yBAAKV,MAAO,CAAEW,gBAAiB,qCAAsCC,eAAgB,QAASC,OAAO,UACjG,+BACKL,GAGL,yBAAKR,MAAO,CAAEc,gBAAiB,iBAAkBD,OAAO,SACpD,wBAAIb,MAAO,CAAEc,gBAAiB,oBAAsBf,UAAU,8BAA9D,0BACA,yBAAKA,UAAU,aACX,yBAAKA,UAAU,wBACX,yBAAKA,UAAU,SACX,yBAAKA,UAAU,qBACX,yBAAKA,UAAU,oBAAoBC,MAAO,CAAEC,MAAO,SAAWG,IAAI,2BAA2BW,IAAI,cACjG,yBAAKf,MAjCZ,CACjBC,MAAO,QACPe,IAAK,OACLC,MAAO,OACPC,QAAS,OA6ByCnB,UAAU,iCAAiCK,IAAKe,KAAK7B,MAAMC,eAAec,MACpG,yBAAKL,MAzBb,CAChBC,MAAO,QACPe,IAAK,QACLI,KAAM,QACNC,YAAa,OACbP,gBAAiB,qBACjBQ,UAAW,OACXT,OAAQ,SAkByCd,UAAU,sBAC/B,0BAAMC,MAAO,CAAEuB,MAAO,UAAWC,SAAU,QAAUzB,UAAU,oBAAoBoB,KAAK7B,MAAMC,eAAekC,MADjH,IAC8H,6BAC1H,0BAAMzB,MAAO,CAAEwB,SAAU,OAAQE,aAAc,MAAOC,WAAY,QAAUR,KAAK7B,MAAMC,eAAeqC,SAIlH,yBAAK7B,UAAU,SACX,yBAAKC,MAAO,CAAEC,MAAO,SAAWG,IAAI,2BAA2BW,IAAI,iBAM/E,yBAAKhB,UAAU,yEACVoB,KAAK3B,2B,GA1FaqC,cCc5BC,MAXf,WAGE,OACE,yBAAK/B,UAAU,OACb,kBAAC,EAAD,QCAcgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e89137fa.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport dataGlasses from '../Data/dataGlasses.json'\nimport './BaiTapThuKinh.css';\n\nexport default class BaiTapThuKinh extends Component {\n\n\n    state = {\n        glassesCurrent: {\n            \"id\": 2,\n            \"price\": 50,\n            \"name\": \"GUCCI G8759H\",\n            \"url\": \"./glassesImage/v2.png\",\n            \"desc\": \"Light pink square lenses define these sunglasses, ending with amother of pearl effect tip. \"\n        }\n    }\n\n\n    renderGlassesList = () => {\n        return dataGlasses.map((glassesItem, index) => {\n            return <img onClick={()=>{ this.changeGlasses(glassesItem) }} className=\"ml-2 p-2 border border-width-1\" style={{ width: '110px', cursor: 'pointer' }} key={index} src={glassesItem.url} />\n        })\n    }\n\n    changeGlasses = (newGlasses) => {\n        this.setState({\n            glassesCurrent:newGlasses\n        })\n    }\n\n    render() {\n\n        const keyFrame = `@keyframes animChangeGlasses${Date.now()} {\n            from {\n                width: 0;\n                transform: rotate(45deg);\n                opacity:0;\n            }\n            to {\n                width:150px;\n                opacity:0.7;\n                transform: rotate(0deg);\n\n            }\n        }`;\n        \n        const styleGlasses = {\n            width: '150px',\n            top: '75px',\n            right: '70px',\n            opacity: '0.7',\n            // transform: 'rotate(0deg)',\n            // animation: `animChangeGlasses${Date.now()} 2s`\n        }\n\n        const infoGlasses = {\n            width: '250px',\n            top: '200px',\n            left: '270px',\n            paddingLeft: '15px',\n            backgroundColor: 'rgba(255,127,0,.5)',\n            textAlign: 'left',\n            height: '105px'\n        }\n\n\n        return (\n            <div style={{ backgroundImage: 'url(./glassesImage/background.jpg)', backgroundSize: 'cover', height:'100vh'}}>\n                <style>\n                    {keyFrame}\n                </style>\n\n                <div style={{ backgroundColor: 'rgba(0,0,0,.8)', height:'100%'}}>\n                    <h3 style={{ backgroundColor: 'rgba(0, 0 ,0,.3)' }} className=\"text-center text-light p-5\">TRY GLASSES APP ONLINE</h3>\n                    <div className=\"container\">\n                        <div className=\"row mt-5 text-center\">\n                            <div className=\"col-6\">\n                                <div className=\"position-relative\">\n                                    <img className=\"position-absolute\" style={{ width: '250px' }} src=\"./glassesImage/model.jpg\" alt='model.jpg' />\n                                    <img style={styleGlasses} className=\"position-absolute glassesStyle\" src={this.state.glassesCurrent.url} />\n                                    <div style={infoGlasses} className=\"position-relative \">\n                                        <span style={{ color: '#AB82FF', fontSize: '17px' }} className=\"font-weight-bold\">{this.state.glassesCurrent.name}</span> <br />\n                                        <span style={{ fontSize: '14px', paddingRight: '5px', fontWeight: '400' }}>{this.state.glassesCurrent.desc}</span>\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"col-6\">\n                                <img style={{ width: '250px' }} src=\"./glassesImage/model.jpg\" alt='model.jpg' />\n\n                            </div>\n                        </div>\n                    </div>\n                    {/* Div chứa các kính được chọn */}\n                    <div className=\"bg-light container text-center mt-5 d-flex justify-content-center p-5\">\n                        {this.renderGlassesList()}\n                    </div>\n                </div>\n            </div >\n        )\n    }\n}\n","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n\nimport BaiTapThuKinh from './BaiTapThuKinh/BaiTapThuKinh';\n\n\nfunction App() {\n\n\n  return (\n    <div className=\"App\">     \n      <BaiTapThuKinh />    \n    </div>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}